name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-rust:
    name: Test Rust (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --workspace --all-targets -- -D warnings
    
    - name: Test with coverage
      run: cargo tarpaulin --all-features --out lcov --output-dir ./
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./lcov.info
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
    
  test-python:
    name: Test Python (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install maturin
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          pip install maturin
        else
          pip install maturin[patchelf]
        fi
      shell: bash
    
    - name: Create virtual environment
      run: python -m venv .venv
      shell: bash
    
    - name: Build and install rapidgeo (base)
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        cd rapidgeo-py
        if [ "${{ runner.os }}" = "macOS" ]; then
          export MACOSX_DEPLOYMENT_TARGET=11.0
        fi
        maturin develop --release
      shell: bash
    
    - name: Test rapidgeo base package
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        cd rapidgeo-py
        python -c "from rapidgeo.distance import LngLat; from rapidgeo.simplify import douglas_peucker; print('Base package with simplify works')"
      shell: bash
    
    - name: Install numpy
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        pip install numpy
      shell: bash
    
    - name: Build and install rapidgeo with numpy
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        cd rapidgeo-py
        if [ "${{ runner.os }}" = "macOS" ]; then
          export MACOSX_DEPLOYMENT_TARGET=11.0
        fi
        maturin develop --release --features numpy
      shell: bash
    
    - name: Test rapidgeo with numpy
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        cd rapidgeo-py
        python -c "import rapidgeo; import numpy; print('Numpy integration works')"
      shell: bash
    
    - name: Install pytest
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        pip install pytest pytest-cov
      shell: bash
    
    - name: Run pytest
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        cd rapidgeo-py
        python -m pytest tests/ -v --cov=rapidgeo --cov-report=term-missing
      shell: bash
    
    - name: Run integration tests
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        cd rapidgeo-py
        python tests/test_rapidgeo.py
      shell: bash